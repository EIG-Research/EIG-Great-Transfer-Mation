# AUTHOR: Sarah Eckhardt
# PROJECT: Transfer Income
# DESCRIPTION: this file wrangles BEA CAINC4 and CAINC35 data files to construct
#             the project master data file, for the nation only
#             merges in two sets of FIPS codes: (1) with VA boundaries updated,
#             this is because datawrapper.com can graph historical FIPS codes
#             and boundaries impact random forest results.
#             and adds the old age population
#DATA SOURCE: https://apps.bea.gov/regional/downloadzip.cfm
# remove dependencies
rm(list = ls())
# load packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(openxlsx)
library(readxl)
library(stringr)
# project paths
path_project = "C:/Users/bngla/EIG Dropbox/Benjamin Glasner/GitHub/EIG-Great-Transfer-Mation"
path_data_raw = file.path(path_project,"data/raw")
path_data_clean = file.path(path_project,"data")
# load data and select desired line codes. combine.
linecodes_c4 = c("10", "20", "45", "46", "47","50","7010")
linecodes_c35 = c("2000", "2100", "2110", "2200", "2210", "2220", "2230",
"2300", "2310", "2320", "2330", "2340", "2400", "2410",
"2500", "2600", "2700", "5000", "3000", "4000")
df_cainc4 <- read.csv(paste(path_data_raw, "bea/CAINC4__ALL_AREAS_1969_2022.csv", sep = "/")) %>%
filter(LineCode %in% linecodes_c4) # includes United States totals
df_cainc35 <- read.csv(paste(path_data_raw, "bea/CAINC35__ALL_AREAS_1969_2022.csv", sep = "/")) %>%
filter(LineCode %in% linecodes_c35)
df_bea = bind_rows(df_cainc4, df_cainc35) %>% # includes United States totals
filter(GeoName == "United States")
# reshape
df_bea = df_bea %>%
pivot_longer(
cols = `X1969`:`X2022`,
names_to = "year",
values_to = "value"
) %>%
mutate(year = as.numeric(gsub("X", "", year)),
value = as.numeric(gsub("(NA)", "", value)),
value = ifelse(Unit == "Thousands of dollars", value*1000, value)) %>%
select(-c("Description", "Unit", "IndustryClassification", "TableName", "Region"))
# pivot wider and re-name
df_bea = df_bea %>%
pivot_wider(
names_from = LineCode,
values_from = value) %>%
rename(
personal_income = `10`,
population = `20`,
net_earnings = `45`,
dividends_interest_rent = `46`,
transfers_all = `47`,
wages_and_salaries = `50`,
total_employment = `7010`,
transfers_govt = `2000`,
transfers_retirement_disability = `2100`,
transfers_social_security = `2110`,
transfers_medical = `2200`,
transfers_medicare = `2210`,
transfers_medicaid = `2220`,
transfers_medical_military = `2230`,
transfers_income_maintenance = `2300`,
transfers_ssi = `2310`,
transfers_eitc = `2320`,
transfers_snap = `2330`,
transfers_income_maintenance_other = `2340`,
transfers_unempl_insurance = `2400`,
transfers_state_unempl_insurance = `2410`,
transfers_veterans = `2500`,
transfers_education_training = `2600`,
transfers_other = `2700`,
transfers_refundable_tax_credits = `5000`,
tranfers_non_for_profits = `3000`,
transfers_businesses = `4000`) %>%
separate(GeoName,c("county", "state"), sep = ",", remove = FALSE) %>% select(-c("county"))
df_bea = df_bea %>%
filter(year>1969) %>%
select("GeoFIPS","GeoName","state", "year", "population","total_employment",
"personal_income","net_earnings","dividends_interest_rent",
"transfers_all", "wages_and_salaries","transfers_govt",
"transfers_retirement_disability", "transfers_social_security",
"transfers_medical","transfers_medicare","transfers_medicaid",
"transfers_medical_military","transfers_income_maintenance","transfers_ssi",
"transfers_eitc","transfers_snap","transfers_income_maintenance_other",
"transfers_unempl_insurance","transfers_state_unempl_insurance","transfers_veterans",
"transfers_education_training", "transfers_other","tranfers_non_for_profits",
"transfers_businesses","transfers_refundable_tax_credits")
#######
# read in PCE deflator for inflation adjustments. all dollars to be expressed in 2022 USD.
df_pce = read_excel(paste(path_data_raw, "bea/BEA_deflator.xlsx", sep = "/")) %>%
rename(year = names(.)[1],
pce_deflator = names(.)[3]) %>%
select(-c("Gross domestic product")) %>%
mutate(pce_deflator_2022 = (pce_deflator/116.043)*100) # / 2022 value
df_bea = left_join(df_bea, df_pce, by = "year") # ensures no drops
#######
# transformations for every variable.
transform_vars = df_bea %>% select(personal_income:transfers_refundable_tax_credits) %>% names()
# inflation
df_bea = df_bea %>%
mutate(across(transform_vars,
~./pce_deflator_2022*100,
.names = "{.col}_pce"))
# per cap transformations for every variable
df_bea = df_bea %>%
mutate(across(transform_vars,
~./population,
.names = "{.col}_per_capita"))
# per capita pce transformation
df_bea = df_bea %>%
mutate(across(transform_vars,
~./pce_deflator_2022*100/population,
.names = "{.col}_pce_per_capita"))
#######
# additional variables required
df_bea = df_bea %>%
mutate(employ_to_pop_ratio = total_employment/population,
share_transfers_govt_personal_income =  transfers_govt/personal_income, # the main ratio in question
transfer_tiers = case_when(
share_transfers_govt_personal_income<0.15 ~ "minimal (<15%)",
share_transfers_govt_personal_income >=0.15 &
share_transfers_govt_personal_income <0.25 ~ "moderate (15-24.9%)",
share_transfers_govt_personal_income >=0.25 ~ "significant (25%+)"))
#######
# merge in old age estimates. from wrangle_old_age.R
population_old = read_excel(paste(path_data_clean,
"population_nation_1970_to_2022.xlsx", sep = "/")) %>%
mutate(year= str_trim(year)) %>%
group_by(year) %>%
summarise(population_over_65 = sum(population_over_65),
total_population = sum(total_population)) %>%
ungroup() %>%
mutate(share_65_over = population_over_65/total_population)
df_bea =  df_bea %>% mutate(GeoFIPS = str_trim(GeoFIPS), year = str_trim(year))
df_bea = left_join(df_bea, population_old, by = c("year"))
View(df_bea)
# AUTHOR: Sarah Eckhardt
# PROJECT: Transfer Income
# DESCRIPTION: this file wrangles BEA CAINC4 and CAINC35 data files to construct
#             the project master data file, for the nation only
#             merges in two sets of FIPS codes: (1) with VA boundaries updated,
#             this is because datawrapper.com can graph historical FIPS codes
#             and boundaries impact random forest results.
#             and adds the old age population
#DATA SOURCE: https://apps.bea.gov/regional/downloadzip.cfm
# remove dependencies
rm(list = ls())
# load packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(openxlsx)
library(readxl)
library(stringr)
# project paths
path_project = "C:/Users/bngla/EIG Dropbox/Benjamin Glasner/GitHub/EIG-Great-Transfer-Mation"
path_data_raw = file.path(path_project,"data/raw")
path_data_clean = file.path(path_project,"data")
# load data and select desired line codes. combine.
linecodes_c4 = c("10", "20", "45", "46", "47","50","7010")
linecodes_c35 = c("2000", "2100", "2110", "2200", "2210", "2220", "2230",
"2300", "2310", "2320", "2330", "2340", "2400", "2410",
"2500", "2600", "2700", "5000", "3000", "4000")
df_cainc4 <- read.csv(paste(path_data_raw, "bea/CAINC4__ALL_AREAS_1969_2022.csv", sep = "/")) %>%
filter(LineCode %in% linecodes_c4) # includes United States totals
df_cainc35 <- read.csv(paste(path_data_raw, "bea/CAINC35__ALL_AREAS_1969_2022.csv", sep = "/")) %>%
filter(LineCode %in% linecodes_c35)
df_bea = bind_rows(df_cainc4, df_cainc35) %>% # includes United States totals
filter(GeoName == "United States")
# reshape
df_bea = df_bea %>%
pivot_longer(
cols = `X1969`:`X2022`,
names_to = "year",
values_to = "value"
) %>%
mutate(year = as.numeric(gsub("X", "", year)),
value = as.numeric(gsub("(NA)", "", value)),
value = ifelse(Unit == "Thousands of dollars", value*1000, value)) %>%
select(-c("Description", "Unit", "IndustryClassification", "TableName", "Region"))
# pivot wider and re-name
df_bea = df_bea %>%
pivot_wider(
names_from = LineCode,
values_from = value) %>%
rename(
personal_income = `10`,
population = `20`,
net_earnings = `45`,
dividends_interest_rent = `46`,
transfers_all = `47`,
wages_and_salaries = `50`,
total_employment = `7010`,
transfers_govt = `2000`,
transfers_retirement_disability = `2100`,
transfers_social_security = `2110`,
transfers_medical = `2200`,
transfers_medicare = `2210`,
transfers_medicaid = `2220`,
transfers_medical_military = `2230`,
transfers_income_maintenance = `2300`,
transfers_ssi = `2310`,
transfers_eitc = `2320`,
transfers_snap = `2330`,
transfers_income_maintenance_other = `2340`,
transfers_unempl_insurance = `2400`,
transfers_state_unempl_insurance = `2410`,
transfers_veterans = `2500`,
transfers_education_training = `2600`,
transfers_other = `2700`,
transfers_refundable_tax_credits = `5000`,
tranfers_non_for_profits = `3000`,
transfers_businesses = `4000`) %>%
separate(GeoName,c("county", "state"), sep = ",", remove = FALSE) %>% select(-c("county"))
df_bea = df_bea %>%
filter(year>1969) %>%
select("GeoFIPS","GeoName","state", "year", "population","total_employment",
"personal_income","net_earnings","dividends_interest_rent",
"transfers_all", "wages_and_salaries","transfers_govt",
"transfers_retirement_disability", "transfers_social_security",
"transfers_medical","transfers_medicare","transfers_medicaid",
"transfers_medical_military","transfers_income_maintenance","transfers_ssi",
"transfers_eitc","transfers_snap","transfers_income_maintenance_other",
"transfers_unempl_insurance","transfers_state_unempl_insurance","transfers_veterans",
"transfers_education_training", "transfers_other","tranfers_non_for_profits",
"transfers_businesses","transfers_refundable_tax_credits")
#######
# read in PCE deflator for inflation adjustments. all dollars to be expressed in 2022 USD.
df_pce = read_excel(paste(path_data_raw, "bea/BEA_deflator.xlsx", sep = "/")) %>%
rename(year = names(.)[1],
pce_deflator = names(.)[3]) %>%
select(-c("Gross domestic product")) %>%
mutate(pce_deflator_2022 = (pce_deflator/116.043)*100) # / 2022 value
df_bea = left_join(df_bea, df_pce, by = "year") # ensures no drops
#######
# transformations for every variable.
transform_vars = df_bea %>% select(personal_income:transfers_refundable_tax_credits) %>% names()
# inflation
df_bea = df_bea %>%
mutate(across(transform_vars,
~./pce_deflator_2022*100,
.names = "{.col}_pce"))
# per cap transformations for every variable
df_bea = df_bea %>%
mutate(across(transform_vars,
~./population,
.names = "{.col}_per_capita"))
# per capita pce transformation
df_bea = df_bea %>%
mutate(across(transform_vars,
~./pce_deflator_2022*100/population,
.names = "{.col}_pce_per_capita"))
#######
# additional variables required
df_bea = df_bea %>%
mutate(employ_to_pop_ratio = total_employment/population,
share_transfers_govt_personal_income =  transfers_govt/personal_income, # the main ratio in question
transfer_tiers = case_when(
share_transfers_govt_personal_income<0.15 ~ "minimal (<15%)",
share_transfers_govt_personal_income >=0.15 &
share_transfers_govt_personal_income <0.25 ~ "moderate (15-24.9%)",
share_transfers_govt_personal_income >=0.25 ~ "significant (25%+)"))
#######
# merge in old age estimates. from wrangle_old_age.R
population_old = read_excel(paste(path_data_clean,
"population_nation_1970_to_2022.xlsx", sep = "/")) %>%
mutate(year= str_trim(year)) %>%
group_by(year) %>%
summarise(population_over_65 = sum(population_over_65, na.rm = TRUE),
total_population = sum(total_population, na.rm = TRUE)) %>%
ungroup() %>%
mutate(share_65_over = population_over_65/total_population)
View(population_old)
df_bea =  df_bea %>% mutate(GeoFIPS = str_trim(GeoFIPS), year = str_trim(year))
df_bea = left_join(df_bea, population_old, by = c("year"))
View(df_bea)
# export data set
write.xlsx(df_bea, paste(path_data_clean, 'transfers_dataset_nation_master.xlsx', sep = "/"))
# 12 histograms of wage growth
# remove dependencies
rm(list = ls())
# load packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(openxlsx)
library(readxl)
library(stringr)
library(matrixStats)
path_project = "C:/Users/bngla/EIG Dropbox/Benjamin Glasner/GitHub/EIG-Great-Transfer-Mation"
path_data_raw = file.path(path_project,"data/raw")
path_data_clean = file.path(path_project,"data")
path_out = file.path(path_project,"output")
# load data
# national growth rate
read_excel(paste(path_data_clean, "transfers_dataset_nation_master.xlsx", sep ="/")) %>%
filter(year==1970 | year==2022) %>%
mutate(net_earnings = net_earnings_pce_per_capita +
dividends_interest_rent_pce_per_capita) %>%
select(year, net_earnings) %>%
pivot_wider(names_from = year, values_from = net_earnings) %>%
mutate(difference = `2022`/`1970`)
# net earnings + dividends, interest, rent
df_transfers =  read_excel(paste(path_data_clean, "transfers_dataset_counties_master.xlsx", sep ="/")) %>%
filter(year==1970 | year==2022) %>%
mutate(net_earnings = net_earnings_pce_per_capita +
dividends_interest_rent_pce_per_capita) %>%
select(GeoName, year, net_earnings, transfer_tiers) %>%
ungroup() %>%
group_by(GeoName) %>%
mutate(transfer_tiers = ifelse(year==2022, transfer_tiers, NA)) %>%
mutate(transfer_tiers = max(transfer_tiers, na.rm = TRUE))
#############################
# per capita
df_per_cap = df_transfers %>%
pivot_wider(values_from = c("net_earnings"),
names_from = year) %>%
rename(earnings_1970 = `1970`,
earnings_2022 = `2022`) %>%
mutate(earnings_change = earnings_2022/earnings_1970) %>%
mutate(earnings_change = ifelse(earnings_change>6, NA, earnings_change))
# set color scheme
colors = c("significant (25%+)" = "#e1ad28", "moderate (15-24.9%)" = "#b3d6dd",
"minimal (<15%)" = "#1a654d")
#########################
# plots by earnings tier.
#########################
###################################
# histogram exports for datawrapper
df_per_cap_binned = df_per_cap %>%
na.omit() %>%
ungroup() %>%
group_by(transfer_tiers) %>%
mutate(bin = cut(earnings_change, breaks = 30)) %>%
group_by(transfer_tiers, bin) %>%
summarise(count = n())
df_sig = df_per_cap_binned %>%
filter(transfer_tiers=="significant (25%+)") %>%
select(bin, count)
df_mod = df_per_cap_binned %>%
filter(transfer_tiers=="moderate (15-24.9%)") %>%
select(bin, count)
df_min = df_per_cap_binned %>%
filter(transfer_tiers=="minimal (<15%)") %>%
select(bin, count)
# export
write.xlsx(df_sig, "fig12_panel1.xlsx")
write.xlsx(df_mod, "fig12_panel2.xlsx")
write.xlsx(df_min, "fig12_panel3.xlsx")
#################
# build plot in R
plot1 <-  df_per_cap %>%
filter(transfer_tiers=="significant (25%+)") %>%
mutate(lag = earnings_change<2.38) %>%
ggplot(aes(x=earnings_change)) +
geom_histogram(alpha = 0.5, color = "#e1ad28", fill = "#e1ad28") +
geom_vline(xintercept = 2.38) +
labs(title ="",
subtitle = "Significant (25+%)",
y = "counties",
x = "(earnings 2022)/(earnings 1970)") +
theme_minimal() +
theme(axis.title.x = element_text(size = 12, color = "darkgrey"),
axis.text.x = element_text(size = 12, color = "darkgrey"),
axis.text.y = element_text(size=12, color ="darkgrey"),
plot.subtitle = element_text(face="bold", size = 12),
axis.title.y = element_text(size = 12, color = "darkgrey"))
plot2 <- df_per_cap %>%
filter(transfer_tiers=="moderate (15-24.9%)") %>%
ggplot(aes(x=earnings_change)) +
geom_histogram(alpha = 0.8, color = "#b3d6dd", fill = "#b3d6dd") +
geom_vline(xintercept = 2.38) +
labs(title ="",
subtitle = "Moderate (15-24.9%)",
x = "(earnings 2022)/(earnings 1970)") +
theme_minimal() +
theme(axis.title.x = element_text(size = 12, color = "darkgrey"),
axis.text.x = element_text(size = 12, color = "darkgrey"),
axis.text.y = element_text(size=12, color ="darkgrey"),
axis.title.y = element_blank(),
plot.subtitle = element_text(face="bold", size = 12))
plot3 <- df_per_cap %>%
filter(transfer_tiers=="minimal (<15%)") %>%
mutate(earnings_change = ifelse(earnings_change>6, NA, earnings_change))%>%
mutate(lag = earnings_change<2.38) %>%
ggplot(aes(x=earnings_change)) +
geom_histogram(alpha = 0.5, color = "#1a654d", fill = "#1a654d") +
geom_vline(xintercept = 2.38) +
labs(title ="",
subtitle = "Minimal (<15%)",
x = "(earnings 2022)/(earnings 1970)") +
theme_minimal() +
theme(axis.title.x = element_text(size = 12, color = "darkgrey"),
axis.text.x = element_text(size = 12, color = "darkgrey"),
axis.text.y = element_text(size=12, color ="darkgrey"),
axis.title.y = element_blank(),
plot.subtitle = element_text(face="bold", size = 12))
require(gridExtra)
library(grid)
plot = grid.arrange(plot1, plot2,plot3, ncol=3,
top =
textGrob("Figure 12: Real growth in per-capita earnings 1970-2022",
gp=grid::gpar(fontsize = 16, col = "#1a654d", fontface = "bold"),
hjust = 0, x = 0),
bottom = grid::textGrob("\nSource: EIG analysis of Bureau of Economic Analysis data",
hjust = 0, x = 0,
gp = grid::gpar(fontsize = 10, col="black")))
ggsave(plot = plot, paste(path_out, "fig 12.png",sep="/"),
width = 10, height = 6)
# 13 Muncie and Johnstown
rm(list = ls())
library(haven)
library(dplyr)
library(plotly)
library(tidyr)
library(readxl)
path_project = "ENTER USER PROJECT PATH HERE"
path_data_raw = file.path(path_project,"data/raw")
path_data_clean = file.path(path_project,"data")
path_out = file.path(path_project,"output")
df_transfers =  read_excel(paste(path_data_clean, "transfers_dataset_counties_master.xlsx", sep ="/")) %>%
filter(GeoName == "Cambria, PA" | GeoName == "Delaware, IN") %>%
mutate(non_transfers = # non-transfer income
personal_income_pce_per_capita-
transfers_govt_pce_per_capita) %>%
rename(transfers = transfers_govt_pce_per_capita) %>%
select(GeoName, year, transfers, non_transfers)
# 13 Muncie and Johnstown
rm(list = ls())
library(haven)
library(dplyr)
library(plotly)
library(tidyr)
library(readxl)
path_project = "C:/Users/bngla/EIG Dropbox/Benjamin Glasner/GitHub/EIG-Great-Transfer-Mation"
path_data_raw = file.path(path_project,"data/raw")
path_data_clean = file.path(path_project,"data")
path_out = file.path(path_project,"output")
df_transfers =  read_excel(paste(path_data_clean, "transfers_dataset_counties_master.xlsx", sep ="/")) %>%
filter(GeoName == "Cambria, PA" | GeoName == "Delaware, IN") %>%
mutate(non_transfers = # non-transfer income
personal_income_pce_per_capita-
transfers_govt_pce_per_capita) %>%
rename(transfers = transfers_govt_pce_per_capita) %>%
select(GeoName, year, transfers, non_transfers)
# need united states
df_transfers_USA =read_excel(paste(path_data_clean, "transfers_dataset_nation_master.xlsx", sep ="/")) %>%
mutate(non_transfers = # non-transfer income
personal_income_pce_per_capita-
transfers_govt_pce_per_capita) %>%
rename(transfers = transfers_govt_pce_per_capita) %>%
select(GeoName, year, transfers, non_transfers)
df_transfers = rbind(df_transfers, df_transfers_USA)
df_johnstown = df_transfers %>%
filter(GeoName != "Delaware, IN")%>%
pivot_wider(names_from = GeoName,
values_from = c("non_transfers", "transfers")) %>%
rename(earnings_county = `non_transfers_Cambria, PA`,
earnings_nation = `non_transfers_United States`,
transfers_county = `transfers_Cambria, PA`,
tranfsers_nation = `transfers_United States`)
df_muncie = df_transfers %>%
filter(GeoName != "Cambria, PA") %>%
pivot_wider(names_from = GeoName,
values_from = c("non_transfers", "transfers")) %>%
rename(earnings_county = `non_transfers_Delaware, IN`,
earnings_nation = `non_transfers_United States`,
transfers_county = `transfers_Delaware, IN`,
tranfsers_nation = `transfers_United States`)
# save
write.csv(df_muncie, paste(path_out, "fig 13.csv", sep = "/"))
write.csv(df_johnstown, paste(path_out, "fig 14.csv", sep = "/"))
# tables 1 and 2 - counties with highest and lowest transfer share
# table: counties with highest and lowest transfer ratios.
# top 20, bottom 20, add in major city later
# remove dependencies
rm(list = ls())
# load packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(openxlsx)
library(readxl)
library(stringr)
path_project = "C:/Users/bngla/EIG Dropbox/Benjamin Glasner/GitHub/EIG-Great-Transfer-Mation"
path_data_raw = file.path(path_project,"data/raw")
path_data_clean = file.path(path_project,"data")
path_out = file.path(path_project,"output")
transfers = read_excel(paste(path_data_clean, "transfers_dataset_counties_master.xlsx", sep = "/")) %>%
filter(year==2022) %>%
mutate(income_no_transfers = personal_income_pce_per_capita -
transfers_govt_pce_per_capita) %>%
select(GeoName, income_no_transfers,
personal_income_pce_per_capita, share_transfers_govt_personal_income,
population) %>%
rename(County = GeoName,
`Per Capita Income (excl. transfers)` = income_no_transfers,
`Per Capita Income (incl transfers)` = personal_income_pce_per_capita,
`Government Transfer Share` = share_transfers_govt_personal_income)
# select top 20 and bottom 20
# sort by transfers, select top
# sort by -transfers, select bottom.
transfers_ranking = transfers %>% filter(population >=100000) # 100K+
transfers_ranking = transfers_ranking[order(transfers_ranking$`Government Transfer Share`),] %>%
select(-c(population))
low = transfers_ranking %>% slice(1:20)
high = tail(transfers_ranking, n=20)
write.xlsx(low, paste(path_out, "tab 1.xlsx", sep="/"))
write.xlsx(high, paste(path_out, "tab 2.xlsx", sep="/"))
